package mmmi.Domain;

import mmmi.Data_layer.Case;
import mmmi.Data_layer.Citizen;
import mmmi.Data_layer.SearchCase;
import java.util.ArrayList;
import java.util.HashMap;
import LoginSystem.Domain.IEmployee;
import mmmi.Data_layer.DataHandler;
import mmmi.Data_layer.Interfaces.IDataHandler;
import java.util.List;
import java.util.Map;
import mmmi.Domain.Interfaces.IDomain;

public class Department implements IDomain {

    private int departmentID;

    private final IDataHandler dataHandler = new DataHandler();
    private IEmployee loginEmployee;
    private Employee mmmiEmployee;

    private static Department departmentInstance = null;

    private Department() {

    }

    public static Department getInstance() {

        if (departmentInstance == null) {
            departmentInstance = new Department();
        }

        return departmentInstance;
    }

    public void setDepartmentID(int departmentID) {
        this.departmentID = departmentID;
    }

    public int getId() {
        return departmentID;
    }

    public void setLoginEmployee(IEmployee employee) {
        this.loginEmployee = employee;
    }

    /**
     * @param caseNumber
     * @param employeeID
     * @return
     */
    public boolean assignCase(String caseNumber, int employeeID) {
        throw new UnsupportedOperationException();
    }

    /**
     * @param caseNumber
     * @param employeeID
     * @return
     */
    public boolean removeCase(String caseNumber, int employeeID) {
        throw new UnsupportedOperationException();
    }

    /**
     * @param name
     * @param reason
     * @return
     */
    public boolean createCase(String name, String reason) {
        throw new UnsupportedOperationException();
    }

    //REMEMBER: to use the correct names from the IDataHandler interface.
    //REMEMBER: check rights ask the people and dont just do some random stuff.
    @Override
    public Map<String, Map<String, String>> search(String key, String value) {
        //TODO: needs to be able to send all info from a searchcase to the GUI in the form of list with a map
        value += "%" + String.valueOf(departmentID);
        IDataHandler searchHandler = new DataHandler();
        List<SearchCase> searchCases = searchHandler.search(key, value);

        int length = searchCases.size();

        Map searchResultList = new HashMap();
        for (int i = 0; i < length; i++) {
            Map searchResultMap = new HashMap();
            searchResultMap.put("citizenName", searchCases.get(i).getCitizenName());
            searchResultMap.put("currentCaseDate", searchCases.get(i).getCurrentCaseDate());
            searchResultMap.put("createdCaseDate", searchCases.get(i).getCreatedCaseDate());
            searchResultMap.put("caseReason", searchCases.get(i).getReason());
            searchResultMap.put("caseEmployeeName", searchCases.get(i).getEmployeeName());
            searchResultMap.put("caseStatus", searchCases.get(i).getCaseStatus());
            searchResultList.put(searchCases.get(i).getCaseID(), searchResultMap);
        }
        return searchResultList;
    }

    @Override
    public Map<String, String> openCase(int caseID) {
        //TODO: Opens a case with all the info into a map that are sendt to the GUI
        return dataHandler.readCase(caseID).getCaseContent();
    }

    @Override
    public boolean saveCase(Map<String, Map<String, String>> caseInfo) {
        //TODO: Gets a map with both case info and citizen and needs to make it into the right data
        //public Case(String caseID, String caseStatus, int regardingCitizenID, List<Integer> requestingCitizens, Map<String, String> caseContent)
        //TODO: Create case object where contents from caseInfo get put into caseContent Map
        // Autogenerate caseID based on department, commune
        // We need to get all info from caseInfo in regards to writeCitizen
        // Autogenerated

        // Key = CaseContents > Map
        // Key = citizenInformation > Map
        // Key =
        // writeCitizen returner en int værdi ift. regardingCitizen id
        // RequestingCitizen skal kunne gemme alle id'er på de forskellige aktør der henvender sig om borgen, dvs, hvis sagen
        // åbnes igen og der tilføjes en ny requestingCitizen, skal der tilføjes til requestingCitizen listen.
//        Case caze = new Case(caseInfo.get("caseID"), caseInfo.get("caseStatus"), c.getCitizenID(), caseInfo.get("requestingCitizens"), caseInfo.get("caseContent"));
        Map<String, String> contentsMap = new HashMap<>();
        List<Map<String, String>> citizenInfoList = new ArrayList<>();
        Map<String, String> cRegarding = new HashMap<>();
        Map<String, String> cRequesting = new HashMap<>();

        System.out.println(caseInfo);
//        for (int i = 0; i < caseInfo.size(); i++) {
//
//            Map<String, String> map = caseInfo.get(i);
//            if (map.containsKey("regardinginquiry")) {
//                System.out.println("condmap" + map);
//                contentsMap = map;
//            } else {
//                citizenInfoList.add(map);
//            }
//        }
        for (Map.Entry<String, Map<String, String>> entry : caseInfo.entrySet()) {
            if (entry.getKey().equalsIgnoreCase("caseContents")) {
                contentsMap = entry.getValue();

            }
            if (entry.getKey().equalsIgnoreCase("cRegarding")) {
                cRegarding = entry.getValue();
            }
            if (entry.getKey().equalsIgnoreCase("cRequesting")) {
                cRequesting = entry.getValue();
            }
        }

//        String firstName, lastName, streetName, cityName, cpr, zipcode, houseNo, floor, floorDir, citizenType;
//        firstName = lastName = streetName = cityName = zipcode = houseNo = floor = floorDir = citizenType = cpr = "";
        int getCitizenID = 0;
//        List<Citizen> citezinList = new ArrayList<>();
        Citizen citizen = dataHandler.createCitizen();
        for (Map<String, String> map : citizenInfoList) {
            if (map.containsKey("regardingCitizen") || map.containsValue("requestingCitizen")) {
                citizen.setFirstName(map.get("firstName"));
                citizen.setLastName(map.get("lastName"));
                citizen.setStreetName(map.get("streetName"));
                citizen.setCprNo(map.get("cpr"));
                citizen.setCityname(map.get("cityName"));
                citizen.setZipcode(Integer.valueOf(map.get("zipCode")));
                citizen.setHouseNo(map.get("houseNo"));
                citizen.setFloor(map.get("floor"));
                citizen.setFloorDirection(map.get("floorDirection"));
                citizen.setRegardingCitizen(Boolean.valueOf(map.get("reqardingCitizen")));
                citizen.setRequestingCitizen(Boolean.valueOf(map.get("regardingCitizen")));
            }

            citizen = new Citizen(-1, citizen.getFirstName(), citizen.getLastName(),
                    citizen.getCprNo(), citizen.getStreetName(), citizen.getHouseNo(), citizen.getFloor(), citizen.getFloorDirection(),
                    citizen.getZipcode(), citizen.getCityname(), citizen.isRegardingCitizen(), citizen.isRequestingCitizen());
            getCitizenID = dataHandler.writeCitizen(citizen);
//            citezinList.add(citizen);

        }
//        for (Citizen a : citezinList) {
//            System.out.println("Citesin add to db:  " + a.toString());
//            getCitizenID = dataHandler.writeCitizen(a);
//        }

        List<Integer> requestingCitizenList = new ArrayList<>();
//        requestingCitizenList.add(getCitizenID);
        Case caze = null;
        for (Map.Entry<String, String> entry : contentsMap.entrySet()) {
            String key = entry.getKey();
            String value = entry.getValue();
            if (key.equalsIgnoreCase("caseID")) {

                if (value.equalsIgnoreCase("-1")) {
                    caze = new Case(Integer.valueOf(contentsMap.get("caseID")), "Igang", getCitizenID, requestingCitizenList, contentsMap);

                }

            }

        }
        return dataHandler.writeCase(caze);

    }

    private boolean isCitizen(String key, String value, Map<String, String> map) {
        if (map != null) {
            if (map.containsKey(key)) {
                if ((map.get(key)).equals(value)) {
                    return true;
                }
            }
        }
        return false;
    }

    @Override
    public Employee getEmployee() {
        return receiveEmployee();
    }

    private Employee receiveEmployee() {

        int employeeid = loginEmployee.getEmployeeID();

        String employeeName = dataHandler.readEmployee(employeeid).getName();
        int roleID = dataHandler.readEmployee(employeeid).getRoleID();
        Map<String, String> casemap = dataHandler.readEmployee(employeeid).getEmployeeCases();
        Map<Integer, String> rightsMap = dataHandler.readEmployee(employeeid).getrights();

        return mmmiEmployee = new Employee(employeeid, employeeName, this.departmentID, roleID, casemap, rightsMap);
    }

    public static void main(String[] args) {
        Department department = new Department();

        Map<String, Map<String, String>> caseInfo = new HashMap<>();

        Map<String, String> conentsMap = new HashMap<>();
        conentsMap.put("regardinginquiry", "test1");
        conentsMap.put("treatment", "test2");
        conentsMap.put("caseID", "-1");

        Map<String, String> citizenInfoRegarding = new HashMap<>();
        citizenInfoRegarding.put("firstName", "RegardingFind");
        citizenInfoRegarding.put("lastName", "RegardingHansen");
        citizenInfoRegarding.put("streetName", "RegardingStreet");
        citizenInfoRegarding.put("cityName", "Kerteminde");
        citizenInfoRegarding.put("zipCode", "5300");
        citizenInfoRegarding.put("houseNo", "75");
        citizenInfoRegarding.put("regardingCitizen", "true");
        citizenInfoRegarding.put("requestingCitizen", "false");
        citizenInfoRegarding.put("cpr", "");
        citizenInfoRegarding.put("floor", "");
        citizenInfoRegarding.put("floorDirection", "");

        Map<String, String> citizenInfoRequesting = new HashMap<>();
        citizenInfoRequesting.put("firstName", "Requestingmads");
        citizenInfoRequesting.put("lastName", "RequestingHansen");
        citizenInfoRequesting.put("streetName", "RequestingStreet");
        citizenInfoRequesting.put("cityName", "Kerteminde");
        citizenInfoRequesting.put("zipCode", "5300");
        citizenInfoRequesting.put("houseNo", "75");
        citizenInfoRequesting.put("regardingCitizen", "false");
        citizenInfoRequesting.put("requestingCitizen", "true");
        citizenInfoRequesting.put("cpr", "");
        citizenInfoRequesting.put("floor", "");
        citizenInfoRequesting.put("floorDirection", "");

        Map<String, String> cd = new HashMap<>();
        citizenInfoRequesting.put("firstName", "cd");
        citizenInfoRequesting.put("lastName", "RequestingHansen");
        citizenInfoRequesting.put("streetName", "RequestingStreet");
        citizenInfoRequesting.put("cityName", "Kerteminde");
        citizenInfoRequesting.put("zipCode", "5300");
        citizenInfoRequesting.put("houseNo", "75");
        citizenInfoRequesting.put("regardingCitizen", "false");
        citizenInfoRequesting.put("requestingCitizen", "true");
        citizenInfoRequesting.put("cpr", "");
        citizenInfoRequesting.put("floor", "");
        citizenInfoRequesting.put("floorDirection", "");

        Map<String, String> cb = new HashMap<>();
        citizenInfoRegarding.put("firstName", "cb");
        citizenInfoRegarding.put("lastName", "RegardingHansen");
        citizenInfoRegarding.put("streetName", "RegardingStreet");
        citizenInfoRegarding.put("cityName", "Kerteminde");
        citizenInfoRegarding.put("zipCode", "5300");
        citizenInfoRegarding.put("houseNo", "75");
        citizenInfoRegarding.put("regardingCitizen", "true");
        citizenInfoRegarding.put("requestingCitizen", "false");
        citizenInfoRegarding.put("cpr", "");
        citizenInfoRegarding.put("floor", "");
        citizenInfoRegarding.put("floorDirection", "");

        caseInfo.put("caseContents", conentsMap);
        caseInfo.put("cRegarding", citizenInfoRegarding);
        caseInfo.put("cRequesting", citizenInfoRequesting);

        department.saveCase(caseInfo);

    }
}
